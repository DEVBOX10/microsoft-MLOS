<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MLOS</title>
    <link>https://microsoft.github.io/MLOS/documentation/</link>
    <description>Recent content on MLOS</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://microsoft.github.io/MLOS/documentation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/01-Prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/01-Prerequisites/</guid>
      <description>Prerequisites for building and using MLOS These are one-time setup instructions that should be executed prior to following the build instructions in 02-Build/
Contents  Requirements Clone the repository Install build tools  Linux Windows   Install Python Dependencies  Linux Windows   Install Docker  Linux Windows     Note: Most Windows shell commands here expect powershell (or pwsh).
 Requirements MLOS currently only supports 64-bit Intel/AMD platforms, though ARM64 support is under development.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/02-Build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/02-Build/</guid>
      <description>Build Instructions for MLOS Prerequisites See 01-Prerequisites/ for initial build tools setup instructions.
Linux TODO
Windows CLI Visual Studio build tools need to be added to the shell environment.
 Note: Visual Studio build tools are available free.
Please see the initial setup instructions linked above for details.
   Setup the powershell environment to find the Visual Studio build tools.
.\scripts\init.windows.ps1 Note: you can also execute .\scripts\init.windows.cmd if you prefer a cmd environment.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/03-ExampleUsage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/03-ExampleUsage/</guid>
      <description>Examples of using MLOS to optimize a system TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/04-Contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/04-Contributing/</guid>
      <description>Contributing to MLOS TODO: Write up some instructions for contributing to MLOS codebase itself.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/05-Test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/05-Test/</guid>
      <description>Test Instructions for MLOS TODO: document how to run unit tests for
 C++ C#  Python First, ensure that the necessary Python modules are installed. See 01-Prerequisites/ for details.
Linux scripts/run-python-tests.sh Windows scripts\run-python-tests.cmd </description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/06-Debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/06-Debug/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/CodingStandard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/CodingStandard/</guid>
      <description>MLOS Coding Standards MLOS uses and supports multiple languages. Here we document the coding styles and standards we attempt to adhere to and the tools we use to achieve that.
C++ For C++ we mostly try to follow the Google C++ style guidelines, with a few modifications.
Currently we rely on uncrustify to help enforce these rules (plus a little bit of human review).
See build/uncrustify/README/ for additional information.
Though we attempt to make it somewhat readable, we exclude code generated by MLOS from these strict style checks.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/Glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/Glossary/</guid>
      <description>MLOS Terms Glossary TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/MlosArchitecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/MlosArchitecture/</guid>
      <description>MLOS Architecture This document provides a brief overview of the MLOS architecture for supporting Machine Learning Optimized Systems.
 MLOS Architecture  High Level Description  Principles Workflows   Architecture Diagram  Main Components Shared Memory Regions Target process  Mlos.Core Shared Channel   Mlos.Agent  Mlos.NetCore Settings Registry Assemblies Grpc Server Experiment Management     Implementation Details    High Level Description At a high level, MLOS provides infrastructure to support instance-specific tuning systems software (e.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/RepoOrganization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/RepoOrganization/</guid>
      <description>Repo Organization Some notes on the directory layout organization in this repo.
 There are build files (e.g. dirs.proj for msbuild or dotnet build, or Makefiles for make) in most directories to allow easy recursive building of that subtree you happen to be in.  Note: we provide Makefile wrappers in most directories to simply help invoke cmake and the Makefiles it generates
  build/ contains configuration related to building MLOS components  For instance, .</description>
    </item>
    
  </channel>
</rss>