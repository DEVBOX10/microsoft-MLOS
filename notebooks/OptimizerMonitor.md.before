# [Download notebook](https://raw.githubusercontent.com/microsoft/MLOS/main/source/Mlos.Notebooks/FILENAME.ipynb)
 
# Goal

The goal of this notebook is to provide a UI to a data scientist or dev 2.0 to interact with the optimizers residing in the optimizer microservice.

## TODO
1. Integrate Model Tomograph:
    1. <s>Change Predict() to return a pandas df:</s>
        1. <s> change change/eliminate the prediction class.</s>
    1. Fix the individual models input spaces so that they reject invalid points.
    1. Add color scale
    1. Add cross-hairs

1. Display current optimum:
    1. Add this functionality to the grpc implementation.
    
1. Display parameter importance
1. Display pareto frontier
1. Allow data scientist/dev2.0 to export all data ingested by the optimizer:
    1. Check in DataSet and DataSetView classes
    1. Integrate the DataSet and DataSetView classes into the framework
    
1. Display Optimizer/Model robustness statistics:
    1. Compute the model fit values: r\**2, rmse, etc., during fit
    1. Expose them over grpc
1. Turn on logging to console in the service process.


```python
from IPython.core.display import display, HTML
display(HTML("<style>.container { width:100% !important; }</style>"))
```


```python
import grpc
from mlos.Grpc.OptimizerMonitor import OptimizerMonitor

grpc_port = 50051

optimizer_service_grpc_channel = grpc.insecure_channel(f'localhost:{grpc_port}')
optimizer_monitor = OptimizerMonitor(grpc_channel=optimizer_service_grpc_channel)
```


```python
for optimizer in optimizer_monitor.get_existing_optimizers():
    print(optimizer.id)
```


```python
optimizer = optimizer_monitor.get_optimizer_by_id("0")
```


```python
from mlos.Tomograph.ModelTomograph import ModelTomograph

tomograph = ModelTomograph(optimizer=optimizer)
tomograph.plot()
```
